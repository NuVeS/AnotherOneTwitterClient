// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R: Rswift.Validatable {
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `TwitterKitResources.bundle`.
    static let twitterKitResourcesBundle = FileResource(bundle: _R.hostingBundle, name: "TwitterKitResources", pathExtension: "bundle")
    
    /// `bundle.URLForResource("TwitterKitResources", withExtension: "bundle")`
    static func twitterKitResourcesBundle(_: Void) -> NSURL? {
      let fileResource = R.file.twitterKitResourcesBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `feed`.
    static let feed = ImageResource(bundle: _R.hostingBundle, name: "feed")
    /// Image `profile`.
    static let profile = ImageResource(bundle: _R.hostingBundle, name: "profile")
    
    /// `UIImage(named: "feed", bundle: ..., traitCollection: ...)`
    static func feed(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.feed, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "profile", bundle: ..., traitCollection: ...)`
    static func profile(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.profile, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  private struct intern: Rswift.Validatable {
    static func validate() throws {
      try _R.validate()
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `Feed`.
    static let feed = _R.storyboard.feed()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "Feed", bundle: ...)`
    static func feed(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.feed)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R: Rswift.Validatable {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.viper.AnotherOneTwitterClient") ?? NSBundle.mainBundle()
  
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    private init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try auth.validate()
      try feed.validate()
    }
    
    struct auth: StoryboardResourceType, Rswift.Validatable {
      let authViewController = StoryboardViewControllerResource<AuthViewController>(identifier: "AuthViewController")
      let bundle = _R.hostingBundle
      let name = "Auth"
      
      func authViewController(_: Void) -> AuthViewController? {
        return UIStoryboard(resource: self).instantiateViewController(authViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.auth().authViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'authViewController' could not be loaded from storyboard 'Auth' as 'AuthViewController'.") }
      }
      
      private init() {}
    }
    
    struct feed: StoryboardResourceType, Rswift.Validatable {
      let bundle = _R.hostingBundle
      let feedViewController = StoryboardViewControllerResource<FeedViewController>(identifier: "FeedViewController")
      let name = "Feed"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      let sideMenuViewController = StoryboardViewControllerResource<SideMenuViewController>(identifier: "SideMenuViewController")
      
      func feedViewController(_: Void) -> FeedViewController? {
        return UIStoryboard(resource: self).instantiateViewController(feedViewController)
      }
      
      func profileViewController(_: Void) -> ProfileViewController? {
        return UIStoryboard(resource: self).instantiateViewController(profileViewController)
      }
      
      func sideMenuViewController(_: Void) -> SideMenuViewController? {
        return UIStoryboard(resource: self).instantiateViewController(sideMenuViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.feed().feedViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'feedViewController' could not be loaded from storyboard 'Feed' as 'FeedViewController'.") }
        if _R.storyboard.feed().profileViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Feed' as 'ProfileViewController'.") }
        if _R.storyboard.feed().sideMenuViewController() == nil { throw ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuViewController' could not be loaded from storyboard 'Feed' as 'SideMenuViewController'.") }
      }
      
      private init() {}
    }
    
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceType {
      let bundle = _R.hostingBundle
      let name = "Main"
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}